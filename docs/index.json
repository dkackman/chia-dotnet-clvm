{
  "api/chia.dotnet.clvm.ArgumentType.html": {
    "href": "api/chia.dotnet.clvm.ArgumentType.html",
    "title": "Enum ArgumentType | chia-dotnet-clvm",
    "keywords": "Enum ArgumentType Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public enum ArgumentType Fields Atom = 0 Cons = 1"
  },
  "api/chia.dotnet.clvm.Atoms.html": {
    "href": "api/chia.dotnet.clvm.Atoms.html",
    "title": "Class Atoms | chia-dotnet-clvm",
    "keywords": "Class Atoms Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public static class Atoms Inheritance object Atoms Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ApplyAtom public static readonly byte[] ApplyAtom Field Value byte[] ConsAtom public static readonly byte[] ConsAtom Field Value byte[] FirstAtom public static readonly byte[] FirstAtom Field Value byte[] QuoteAtom public static readonly byte[] QuoteAtom Field Value byte[] RaiseAtom public static readonly byte[] RaiseAtom Field Value byte[] RestAtom public static readonly byte[] RestAtom Field Value byte[]"
  },
  "api/chia.dotnet.clvm.BetterSet-1.html": {
    "href": "api/chia.dotnet.clvm.BetterSet-1.html",
    "title": "Class BetterSet<T> | chia-dotnet-clvm",
    "keywords": "Class BetterSet<T> Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public class BetterSet<T> : HashSet<T>, ISet<T>, ICollection<T>, IReadOnlySet<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable, IDeserializationCallback, ISerializable Type Parameters T Inheritance object HashSet<T> BetterSet<T> Implements ISet<T> ICollection<T> IReadOnlySet<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IDeserializationCallback ISerializable Inherited Members HashSet<T>.Add(T) HashSet<T>.Clear() HashSet<T>.Contains(T) HashSet<T>.CopyTo(T[]) HashSet<T>.CopyTo(T[], int) HashSet<T>.CopyTo(T[], int, int) HashSet<T>.CreateSetComparer() HashSet<T>.EnsureCapacity(int) HashSet<T>.ExceptWith(IEnumerable<T>) HashSet<T>.GetEnumerator() HashSet<T>.IntersectWith(IEnumerable<T>) HashSet<T>.IsProperSubsetOf(IEnumerable<T>) HashSet<T>.IsProperSupersetOf(IEnumerable<T>) HashSet<T>.IsSubsetOf(IEnumerable<T>) HashSet<T>.IsSupersetOf(IEnumerable<T>) HashSet<T>.OnDeserialization(object) HashSet<T>.Overlaps(IEnumerable<T>) HashSet<T>.Remove(T) HashSet<T>.RemoveWhere(Predicate<T>) HashSet<T>.SetEquals(IEnumerable<T>) HashSet<T>.SymmetricExceptWith(IEnumerable<T>) HashSet<T>.TrimExcess() HashSet<T>.TryGetValue(T, out T) HashSet<T>.UnionWith(IEnumerable<T>) HashSet<T>.Comparer HashSet<T>.Count object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BetterSet() public BetterSet() BetterSet(IEnumerable<T>) public BetterSet(IEnumerable<T> collection) Parameters collection IEnumerable<T> Methods Difference(BetterSet<T>) public BetterSet<T> Difference(BetterSet<T> set) Parameters set BetterSet<T> Returns BetterSet<T> DifferenceUpdate(BetterSet<T>) public void DifferenceUpdate(BetterSet<T> set) Parameters set BetterSet<T> EqualsSet(BetterSet<T>) public bool EqualsSet(BetterSet<T> set) Parameters set BetterSet<T> Returns bool Filter(Func<T, bool>) public BetterSet<T> Filter(Func<T, bool> predicate) Parameters predicate Func<T, bool> Returns BetterSet<T> Intersection(BetterSet<T>) public BetterSet<T> Intersection(BetterSet<T> set) Parameters set BetterSet<T> Returns BetterSet<T> IntersectionUpdate(BetterSet<T>) public void IntersectionUpdate(BetterSet<T> set) Parameters set BetterSet<T> IsSubset(BetterSet<T>) public bool IsSubset(BetterSet<T> set) Parameters set BetterSet<T> Returns bool IsSubsetProper(BetterSet<T>) public bool IsSubsetProper(BetterSet<T> set) Parameters set BetterSet<T> Returns bool IsSuperset(BetterSet<T>) public bool IsSuperset(BetterSet<T> set) Parameters set BetterSet<T> Returns bool IsSupersetProper(BetterSet<T>) public bool IsSupersetProper(BetterSet<T> set) Parameters set BetterSet<T> Returns bool Map<U>(Func<T, U>) public BetterSet<U> Map<U>(Func<T, U> mapper) Parameters mapper Func<T, U> Returns BetterSet<U> Type Parameters U SymmetricDifference(BetterSet<T>) public BetterSet<T> SymmetricDifference(BetterSet<T> set) Parameters set BetterSet<T> Returns BetterSet<T> SymmetricDifferenceUpdate(BetterSet<T>) public void SymmetricDifferenceUpdate(BetterSet<T> set) Parameters set BetterSet<T> Union(BetterSet<T>) public BetterSet<T> Union(BetterSet<T> set) Parameters set BetterSet<T> Returns BetterSet<T> Update(BetterSet<T>) public void Update(BetterSet<T> set) Parameters set BetterSet<T>"
  },
  "api/chia.dotnet.clvm.Bindings.html": {
    "href": "api/chia.dotnet.clvm.Bindings.html",
    "title": "Class Bindings | chia-dotnet-clvm",
    "keywords": "Class Bindings Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public static class Bindings Inheritance object Bindings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Match(Program, Program, Group?) public static Group? Match(Program pattern, Program sexp, Group? knownBindings = null) Parameters pattern Program sexp Program knownBindings Group Returns Group Merge<T>(T, T?) public static T Merge<T>(T item1, T? item2) where T : class, new() Parameters item1 T item2 T Returns T Type Parameters T UnifyBindings(Group, string, Program) public static Group? UnifyBindings(Group bindings, string key, Program valueProgram) Parameters bindings Group key string valueProgram Program Returns Group"
  },
  "api/chia.dotnet.clvm.ClvmHelper.html": {
    "href": "api/chia.dotnet.clvm.ClvmHelper.html",
    "title": "Class ClvmHelper | chia-dotnet-clvm",
    "keywords": "Class ClvmHelper Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public static class ClvmHelper Inheritance object ClvmHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BinopReduction(string, BigInteger, Program, Func<BigInteger, BigInteger, BigInteger>) public static ProgramOutput BinopReduction(string opName, BigInteger initialValue, Program args, Func<BigInteger, BigInteger, BigInteger> opFunction) Parameters opName string initialValue BigInteger args Program opFunction Func<BigInteger, BigInteger, BigInteger> Returns ProgramOutput LimbsForBigInt(BigInteger) public static int LimbsForBigInt(BigInteger value) Parameters value BigInteger Returns int MallocCost(ProgramOutput) public static ProgramOutput MallocCost(ProgramOutput output) Parameters output ProgramOutput Returns ProgramOutput Mod(BigInteger, BigInteger) public static BigInteger Mod(BigInteger value, BigInteger modulus) Parameters value BigInteger modulus BigInteger Returns BigInteger ToList(Program, string, int, ArgumentType?) public static IList<Program> ToList(this Program program, string name, int length, ArgumentType? type = null) Parameters program Program name string length int type ArgumentType? Returns IList<Program> ToList(Program, string, int[]?, ArgumentType?) public static IList<Program> ToList(this Program program, string name, int[]? lengthRange, ArgumentType? type = null) Parameters program Program name string lengthRange int[] type ArgumentType? Returns IList<Program> ToList(Program, string, ArgumentType?) public static IList<Program> ToList(this Program program, string name, ArgumentType? type = null) Parameters program Program name string type ArgumentType? Returns IList<Program>"
  },
  "api/chia.dotnet.clvm.Compile.html": {
    "href": "api/chia.dotnet.clvm.Compile.html",
    "title": "Class Compile | chia-dotnet-clvm",
    "keywords": "Class Compile Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public static class Compile Inheritance object Compile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields CompileBindings public static IDictionary<string, Func<Program, Program, Program, Eval, Program>> CompileBindings Field Value IDictionary<string, Func<Program, Program, Program, Eval, Program>> PassThroughOperators public static BetterSet<string> PassThroughOperators Field Value BetterSet<string> Methods BrunAsProgram(Program, Program) public static Program BrunAsProgram(Program program, Program args) Parameters program Program args Program Returns Program CompileMacros(Program, Program, Program, Eval) public static Program CompileMacros(Program args, Program macroLookup, Program symbolTable, Eval runProgram) Parameters args Program macroLookup Program symbolTable Program runProgram Eval Returns Program CompileQq(Program, Program, Program, Eval) public static Program CompileQq(Program args, Program macroLookup, Program symbolTable, Eval runProgram) Parameters args Program macroLookup Program symbolTable Program runProgram Eval Returns Program CompileQq(Program, Program, Program, Eval, int) public static Program CompileQq(Program args, Program macroLookup, Program symbolTable, Eval runProgram, int level = 1) Parameters args Program macroLookup Program symbolTable Program runProgram Eval level int Returns Program CompileSymbols(Program, Program, Program, Eval) public static Program CompileSymbols(Program args, Program macroLookup, Program symbolTable, Eval runProgram) Parameters args Program macroLookup Program symbolTable Program runProgram Eval Returns Program DoComProgram(Program, Program, Program, Eval) public static Program DoComProgram(Program program, Program macroLookup, Program symbolTable, Eval runProgram) Parameters program Program macroLookup Program symbolTable Program runProgram Eval Returns Program EvalAsProgram(Program, Program) public static Program EvalAsProgram(Program program, Program args) Parameters program Program args Program Returns Program LowerQuote(Program, Program?, Program?, Eval?) public static Program LowerQuote(Program program, Program? macroLookup = null, Program? symbolTable = null, Eval? runProgram = null) Parameters program Program macroLookup Program symbolTable Program runProgram Eval Returns Program MakeDoCom(Eval) public static Operator MakeDoCom(Eval runProgram) Parameters runProgram Eval Returns Operator QuoteAsProgram(Program) public static Program QuoteAsProgram(Program program) Parameters program Program Returns Program RunAsProgram(Program, Program) public static Program RunAsProgram(Program program, Program macroLookup) Parameters program Program macroLookup Program Returns Program"
  },
  "api/chia.dotnet.clvm.CompileOptions.html": {
    "href": "api/chia.dotnet.clvm.CompileOptions.html",
    "title": "Class CompileOptions | chia-dotnet-clvm",
    "keywords": "Class CompileOptions Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll Represents the options for compiling a CLVM program. public record CompileOptions : RunOptions, IEquatable<RunOptions>, IEquatable<CompileOptions> Inheritance object RunOptions CompileOptions Implements IEquatable<RunOptions> IEquatable<CompileOptions> Inherited Members RunOptions.MaxCost RunOptions.Operators RunOptions.Strict object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IncludeFilePaths Gets or sets the include file paths used during compilation. public IDictionary<string, IDictionary<string, string>> IncludeFilePaths { get; init; } Property Value IDictionary<string, IDictionary<string, string>> Represents the options for compiling a CLVM program."
  },
  "api/chia.dotnet.clvm.Cons.html": {
    "href": "api/chia.dotnet.clvm.Cons.html",
    "title": "Class Cons | chia-dotnet-clvm",
    "keywords": "Class Cons Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll Represents a cons cell in a program. public class Cons : Tuple<Program, Program>, IStructuralComparable, IStructuralEquatable, IComparable, ITuple Inheritance object Tuple<Program, Program> Cons Implements IStructuralComparable IStructuralEquatable IComparable ITuple Inherited Members Tuple<Program, Program>.Equals(object) Tuple<Program, Program>.GetHashCode() Tuple<Program, Program>.ToString() Tuple<Program, Program>.Item1 Tuple<Program, Program>.Item2 object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks https://en.wikipedia.org/wiki/Cons/ Constructors Cons(Program, Program) Represents a cons cell in a program. public Cons(Program item1, Program item2) Parameters item1 Program Represents a cons cell in a program. item2 Program Represents a cons cell in a program. Remarks https://en.wikipedia.org/wiki/Cons/"
  },
  "api/chia.dotnet.clvm.Constants.html": {
    "href": "api/chia.dotnet.clvm.Constants.html",
    "title": "Class Constants | chia-dotnet-clvm",
    "keywords": "Class Constants Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public static class Constants Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields N public static readonly BigInteger N Field Value BigInteger Printable public const string Printable = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~ \\t\\n\\v\\f\" Field Value string"
  },
  "api/chia.dotnet.clvm.Costs.html": {
    "href": "api/chia.dotnet.clvm.Costs.html",
    "title": "Class Costs | chia-dotnet-clvm",
    "keywords": "Class Costs Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public static class Costs Inheritance object Costs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Apply public static readonly BigInteger Apply Field Value BigInteger ArithBase public static readonly BigInteger ArithBase Field Value BigInteger ArithPerArg public static readonly BigInteger ArithPerArg Field Value BigInteger ArithPerByte public static readonly BigInteger ArithPerByte Field Value BigInteger AshiftBase public static readonly BigInteger AshiftBase Field Value BigInteger AshiftPerByte public static readonly BigInteger AshiftPerByte Field Value BigInteger BoolBase public static readonly BigInteger BoolBase Field Value BigInteger BoolPerArg public static readonly BigInteger BoolPerArg Field Value BigInteger ConcatBase public static readonly BigInteger ConcatBase Field Value BigInteger ConcatPerArg public static readonly BigInteger ConcatPerArg Field Value BigInteger ConcatPerByte public static readonly BigInteger ConcatPerByte Field Value BigInteger Cons public static readonly BigInteger Cons Field Value BigInteger DivBase public static readonly BigInteger DivBase Field Value BigInteger DivPerByte public static readonly BigInteger DivPerByte Field Value BigInteger DivmodBase public static readonly BigInteger DivmodBase Field Value BigInteger DivmodPerByte public static readonly BigInteger DivmodPerByte Field Value BigInteger EqBase public static readonly BigInteger EqBase Field Value BigInteger EqPerByte public static readonly BigInteger EqPerByte Field Value BigInteger First public static readonly BigInteger First Field Value BigInteger GrBase public static readonly BigInteger GrBase Field Value BigInteger GrPerByte public static readonly BigInteger GrPerByte Field Value BigInteger GrsBase public static readonly BigInteger GrsBase Field Value BigInteger GrsPerByte public static readonly BigInteger GrsPerByte Field Value BigInteger If public static readonly BigInteger If Field Value BigInteger Listp public static readonly BigInteger Listp Field Value BigInteger LogBase public static readonly BigInteger LogBase Field Value BigInteger LogPerArg public static readonly BigInteger LogPerArg Field Value BigInteger LogPerByte public static readonly BigInteger LogPerByte Field Value BigInteger LognotBase public static readonly BigInteger LognotBase Field Value BigInteger LognotPerByte public static readonly BigInteger LognotPerByte Field Value BigInteger LshiftBase public static readonly BigInteger LshiftBase Field Value BigInteger LshiftPerByte public static readonly BigInteger LshiftPerByte Field Value BigInteger MallocPerByte public static readonly BigInteger MallocPerByte Field Value BigInteger MulBase public static readonly BigInteger MulBase Field Value BigInteger MulLinearPerByte public static readonly BigInteger MulLinearPerByte Field Value BigInteger MulPerOp public static readonly BigInteger MulPerOp Field Value BigInteger MulSquarePerByteDivider public static readonly BigInteger MulSquarePerByteDivider Field Value BigInteger PathLookupBase public static readonly BigInteger PathLookupBase Field Value BigInteger PathLookupPerLeg public static readonly BigInteger PathLookupPerLeg Field Value BigInteger PathLookupPerZeroByte public static readonly BigInteger PathLookupPerZeroByte Field Value BigInteger PointAddBase public static readonly BigInteger PointAddBase Field Value BigInteger PointAddPerArg public static readonly BigInteger PointAddPerArg Field Value BigInteger PubkeyBase public static readonly BigInteger PubkeyBase Field Value BigInteger PubkeyPerByte public static readonly BigInteger PubkeyPerByte Field Value BigInteger Quote public static readonly BigInteger Quote Field Value BigInteger Rest public static readonly BigInteger Rest Field Value BigInteger Sha256Base public static readonly BigInteger Sha256Base Field Value BigInteger Sha256PerArg public static readonly BigInteger Sha256PerArg Field Value BigInteger Sha256PerByte public static readonly BigInteger Sha256PerByte Field Value BigInteger StrlenBase public static readonly BigInteger StrlenBase Field Value BigInteger StrlenPerByte public static readonly BigInteger StrlenPerByte Field Value BigInteger"
  },
  "api/chia.dotnet.clvm.Eval.html": {
    "href": "api/chia.dotnet.clvm.Eval.html",
    "title": "Delegate Eval | chia-dotnet-clvm",
    "keywords": "Delegate Eval Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public delegate ProgramOutput Eval(Program program, Program args) Parameters program Program args Program Returns ProgramOutput"
  },
  "api/chia.dotnet.clvm.Group.html": {
    "href": "api/chia.dotnet.clvm.Group.html",
    "title": "Class Group | chia-dotnet-clvm",
    "keywords": "Class Group Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public class Group : Dictionary<string, Program>, IDictionary<string, Program>, ICollection<KeyValuePair<string, Program>>, IReadOnlyDictionary<string, Program>, IReadOnlyCollection<KeyValuePair<string, Program>>, IEnumerable<KeyValuePair<string, Program>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable Inheritance object Dictionary<string, Program> Group Implements IDictionary<string, Program> ICollection<KeyValuePair<string, Program>> IReadOnlyDictionary<string, Program> IReadOnlyCollection<KeyValuePair<string, Program>> IEnumerable<KeyValuePair<string, Program>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable Inherited Members Dictionary<string, Program>.Add(string, Program) Dictionary<string, Program>.Clear() Dictionary<string, Program>.ContainsKey(string) Dictionary<string, Program>.ContainsValue(Program) Dictionary<string, Program>.EnsureCapacity(int) Dictionary<string, Program>.GetEnumerator() Dictionary<string, Program>.OnDeserialization(object) Dictionary<string, Program>.Remove(string) Dictionary<string, Program>.Remove(string, out Program) Dictionary<string, Program>.TrimExcess() Dictionary<string, Program>.TrimExcess(int) Dictionary<string, Program>.TryAdd(string, Program) Dictionary<string, Program>.TryGetValue(string, out Program) Dictionary<string, Program>.Comparer Dictionary<string, Program>.Count Dictionary<string, Program>.this[string] Dictionary<string, Program>.Keys Dictionary<string, Program>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/chia.dotnet.clvm.Instruction.html": {
    "href": "api/chia.dotnet.clvm.Instruction.html",
    "title": "Delegate Instruction | chia-dotnet-clvm",
    "keywords": "Delegate Instruction Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public delegate BigInteger Instruction(Stack<Instruction> instructions, Stack<Program> stack, RunOptions options) Parameters instructions Stack<Instruction> stack Stack<Program> options RunOptions Returns BigInteger"
  },
  "api/chia.dotnet.clvm.InstructionsClass.html": {
    "href": "api/chia.dotnet.clvm.InstructionsClass.html",
    "title": "Class InstructionsClass | chia-dotnet-clvm",
    "keywords": "Class InstructionsClass Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public static class InstructionsClass Inheritance object InstructionsClass Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instructions public static IDictionary<string, Instruction> Instructions Field Value IDictionary<string, Instruction> Methods MsbMask(byte) public static byte MsbMask(byte byteValue) Parameters byteValue byte Returns byte TraversePath(Program, Program) public static ProgramOutput TraversePath(Program value, Program environment) Parameters value Program environment Program Returns ProgramOutput"
  },
  "api/chia.dotnet.clvm.KeywordConstants.html": {
    "href": "api/chia.dotnet.clvm.KeywordConstants.html",
    "title": "Class KeywordConstants | chia-dotnet-clvm",
    "keywords": "Class KeywordConstants Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public static class KeywordConstants Inheritance object KeywordConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Keywords public static readonly IReadOnlyDictionary<string, BigInteger> Keywords Field Value IReadOnlyDictionary<string, BigInteger>"
  },
  "api/chia.dotnet.clvm.Macros.html": {
    "href": "api/chia.dotnet.clvm.Macros.html",
    "title": "Class Macros | chia-dotnet-clvm",
    "keywords": "Class Macros Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public static class Macros Inheritance object Macros Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DefaultMacroSources public static readonly IList<string> DefaultMacroSources Field Value IList<string> Methods DefaultMacroLookup(Eval) public static Program DefaultMacroLookup(Eval evalAsProgram) Parameters evalAsProgram Eval Returns Program"
  },
  "api/chia.dotnet.clvm.Mod.html": {
    "href": "api/chia.dotnet.clvm.Mod.html",
    "title": "Class Mod | chia-dotnet-clvm",
    "keywords": "Class Mod Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public static class Mod Inheritance object Mod Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MainName public const string MainName = \"\" Field Value string Methods BuildMacroLookupProgram(Program, List<Program>, Eval) public static Program BuildMacroLookupProgram(Program macroLookup, List<Program> macros, Eval runProgram) Parameters macroLookup Program macros List<Program> runProgram Eval Returns Program BuildTree(List<Program>) public static Program BuildTree(List<Program> items) Parameters items List<Program> Returns Program BuildTreeProgram(List<Program>) public static Program BuildTreeProgram(List<Program> items) Parameters items List<Program> Returns Program BuildUsedConstantNames(Dictionary<string, Program>, Dictionary<string, Program>, List<Program>) public static SortedSet<string> BuildUsedConstantNames(Dictionary<string, Program> functions, Dictionary<string, Program> constants, List<Program> macros) Parameters functions Dictionary<string, Program> constants Dictionary<string, Program> macros List<Program> Returns SortedSet<string> CompileFunctions(Dictionary<string, Program>, Program, Program, NodePath) public static Dictionary<string, Program> CompileFunctions(Dictionary<string, Program> functions, Program macroLookupProgram, Program constantSymbolTable, NodePath argsRootNode) Parameters functions Dictionary<string, Program> macroLookupProgram Program constantSymbolTable Program argsRootNode NodePath Returns Dictionary<string, Program> CompileMod(Program, Program, Program, Eval) public static Program CompileMod(Program args, Program macroLookup, Program _symbolTable, Eval runProgram) Parameters args Program macroLookup Program _symbolTable Program runProgram Eval Returns Program CompileModStage1(Program, Eval) public static (Dictionary<string, Program> functions, Dictionary<string, Program> constants, List<Program> macros) CompileModStage1(Program args, Eval runProgram) Parameters args Program runProgram Eval Returns (Dictionary<string, Program> functions, Dictionary<string, Program> constants, List<Program> macros) DefunInlineToMacro(Program) public static Program DefunInlineToMacro(Program program) Parameters program Program Returns Program Flatten(Program) public static List<string> Flatten(Program program) Parameters program Program Returns List<string> ParseInclude(Program, HashSet<string>, Dictionary<string, Program>, Dictionary<string, Program>, List<Program>, Eval) public static void ParseInclude(Program name, HashSet<string> @namespace, Dictionary<string, Program> functions, Dictionary<string, Program> constants, List<Program> macros, Eval runProgram) Parameters name Program namespace HashSet<string> functions Dictionary<string, Program> constants Dictionary<string, Program> macros List<Program> runProgram Eval ParseModProgram(Program, HashSet<string>, Dictionary<string, Program>, Dictionary<string, Program>, List<Program>, Eval) public static void ParseModProgram(Program declarationProgram, HashSet<string> @namespace, Dictionary<string, Program> functions, Dictionary<string, Program> constants, List<Program> macros, Eval runProgram) Parameters declarationProgram Program namespace HashSet<string> functions Dictionary<string, Program> constants Dictionary<string, Program> macros List<Program> runProgram Eval SymbolTableForTree(Program, NodePath) public static Program SymbolTableForTree(Program tree, NodePath rootNode) Parameters tree Program rootNode NodePath Returns Program UnquoteArgs(Program, List<string>) public static Program UnquoteArgs(Program program, List<string> args) Parameters program Program args List<string> Returns Program"
  },
  "api/chia.dotnet.clvm.NodePath.html": {
    "href": "api/chia.dotnet.clvm.NodePath.html",
    "title": "Class NodePath | chia-dotnet-clvm",
    "keywords": "Class NodePath Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public class NodePath Inheritance object NodePath Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NodePath(BigInteger) public NodePath(BigInteger index) Parameters index BigInteger Fields Left public static readonly NodePath Left Field Value NodePath Right public static readonly NodePath Right Field Value NodePath Top public static readonly NodePath Top Field Value NodePath Methods Add(NodePath) public NodePath Add(NodePath other) Parameters other NodePath Returns NodePath AsPath() public byte[] AsPath() Returns byte[] ComposePaths(BigInteger, BigInteger) public static BigInteger ComposePaths(BigInteger left, BigInteger right) Parameters left BigInteger right BigInteger Returns BigInteger First() public NodePath First() Returns NodePath Rest() public NodePath Rest() Returns NodePath ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/chia.dotnet.clvm.Operator.html": {
    "href": "api/chia.dotnet.clvm.Operator.html",
    "title": "Delegate Operator | chia-dotnet-clvm",
    "keywords": "Delegate Operator Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll Represents a delegate for an operator function. public delegate ProgramOutput Operator(Program args) Parameters args Program The arguments passed to the operator. Returns ProgramOutput The output of the operator."
  },
  "api/chia.dotnet.clvm.Operators.html": {
    "href": "api/chia.dotnet.clvm.Operators.html",
    "title": "Class Operators | chia-dotnet-clvm",
    "keywords": "Class Operators Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public static class Operators Inheritance object Operators Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DefaultOperators public static readonly IDictionary<string, Operator> DefaultOperators Field Value IDictionary<string, Operator> Methods DefaultUnknownOperator(Program, Program) public static ProgramOutput DefaultUnknownOperator(Program op, Program args) Parameters op Program args Program Returns ProgramOutput RunOperator(Program, Program, RunOptions) public static ProgramOutput RunOperator(Program op, Program args, RunOptions options) Parameters op Program args Program options RunOptions Returns ProgramOutput"
  },
  "api/chia.dotnet.clvm.OperatorsType.html": {
    "href": "api/chia.dotnet.clvm.OperatorsType.html",
    "title": "Class OperatorsType | chia-dotnet-clvm",
    "keywords": "Class OperatorsType Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll Represents a collection of operators used in the CLVM language. public record OperatorsType : IEquatable<OperatorsType> Inheritance object OperatorsType Implements IEquatable<OperatorsType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OperatorsType() Initializes a new instance of the OperatorsType class. public OperatorsType() Properties Apply Gets or sets the apply operator symbol. public string Apply { get; init; } Property Value string Represents a collection of operators used in the CLVM language. Operators Gets or sets the dictionary of operators. public IDictionary<string, Operator> Operators { get; init; } Property Value IDictionary<string, Operator> Represents a collection of operators used in the CLVM language. Quote Gets or sets the quote operator symbol. public string Quote { get; init; } Property Value string Represents a collection of operators used in the CLVM language. Unknown Gets or sets the unknown operator function. public Func<Program, Program, ProgramOutput> Unknown { get; set; } Property Value Func<Program, Program, ProgramOutput> Represents a collection of operators used in the CLVM language."
  },
  "api/chia.dotnet.clvm.Optimize.html": {
    "href": "api/chia.dotnet.clvm.Optimize.html",
    "title": "Class Optimize | chia-dotnet-clvm",
    "keywords": "Class Optimize Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public static class Optimize Inheritance object Optimize Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ApplyNullOptimizer(Program, Eval) public static Program ApplyNullOptimizer(Program program, Eval _evalAsProgram) Parameters program Program _evalAsProgram Eval Returns Program ChildrenOptimizer(Program, Eval) public static Program ChildrenOptimizer(Program program, Eval evalAsProgram) Parameters program Program evalAsProgram Eval Returns Program ConsFirst(Program) public static Program ConsFirst(Program args) Parameters args Program Returns Program ConsOptimizer(Program, Eval) public static Program ConsOptimizer(Program program, Eval _evalAsProgram) Parameters program Program _evalAsProgram Eval Returns Program ConsQuoteApplyOptimizer(Program, Eval) public static Program ConsQuoteApplyOptimizer(Program program, Eval _evalAsProgram) Parameters program Program _evalAsProgram Eval Returns Program ConsRest(Program) public static Program ConsRest(Program args) Parameters args Program Returns Program ConstantOptimizer(Program, Eval) public static Program ConstantOptimizer(Program program, Eval evalAsProgram) Parameters program Program evalAsProgram Eval Returns Program IsArgsCall(Program) public static bool IsArgsCall(Program program) Parameters program Program Returns bool MakeDoOpt(Eval) public static Operator MakeDoOpt(Eval runProgram) Parameters runProgram Eval Returns Operator OptimizeProgram(Program, Eval) public static Program OptimizeProgram(Program program, Eval evalAsProgram) Parameters program Program evalAsProgram Eval Returns Program PathFromArgs(Program, Program) public static Program PathFromArgs(Program program, Program args) Parameters program Program args Program Returns Program PathOptimizer(Program, Eval) public static Program PathOptimizer(Program program, Eval _evalAsProgram) Parameters program Program _evalAsProgram Eval Returns Program QuoteNullOptimizer(Program, Eval) public static Program QuoteNullOptimizer(Program program, Eval _evalAsProgram) Parameters program Program _evalAsProgram Eval Returns Program SeemsConstant(Program) public static bool SeemsConstant(Program program) Parameters program Program Returns bool SubArgs(Program, Program) public static Program SubArgs(Program program, Program args) Parameters program Program args Program Returns Program VarChangeOptimizerConsEval(Program, Eval) public static Program VarChangeOptimizerConsEval(Program program, Eval evalAsProgram) Parameters program Program evalAsProgram Eval Returns Program"
  },
  "api/chia.dotnet.clvm.ParseError.html": {
    "href": "api/chia.dotnet.clvm.ParseError.html",
    "title": "Class ParseError | chia-dotnet-clvm",
    "keywords": "Class ParseError Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public class ParseError : Exception, ISerializable Inheritance object Exception ParseError Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ParseError() public ParseError() ParseError(string) public ParseError(string message) Parameters message string ParseError(string, Exception) public ParseError(string message, Exception inner) Parameters message string inner Exception"
  },
  "api/chia.dotnet.clvm.Parser.html": {
    "href": "api/chia.dotnet.clvm.Parser.html",
    "title": "Class Parser | chia-dotnet-clvm",
    "keywords": "Class Parser Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public static class Parser Inheritance object Parser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConsumeUntilWhitespace(string, int) public static Token ConsumeUntilWhitespace(string text, int index) Parameters text string index int Returns Token ConsumeWhitespace(string, int) public static int ConsumeWhitespace(string text, int index) Parameters text string index int Returns int Expect(string, IList<Token>) public static void Expect(string source, IList<Token> tokens) Parameters source string tokens IList<Token> IsSpace(char) public static bool IsSpace(char c) Parameters c char Returns bool Next(IList<Token>) public static Token? Next(IList<Token> tokens) Parameters tokens IList<Token> Returns Token TokenStream(string) public static IEnumerable<Token> TokenStream(string source) Parameters source string Returns IEnumerable<Token> TokenizeCons(string, IList<Token>) public static Program TokenizeCons(string source, IList<Token> tokens) Parameters source string tokens IList<Token> Returns Program TokenizeExpr(string, IList<Token>) public static Program TokenizeExpr(string source, IList<Token> tokens) Parameters source string tokens IList<Token> Returns Program TokenizeHex(string, Token) public static Program? TokenizeHex(string source, Token token) Parameters source string token Token Returns Program TokenizeInt(string, Token) public static Program? TokenizeInt(string source, Token token) Parameters source string token Token Returns Program TokenizeQuotes(string, Token) public static Program? TokenizeQuotes(string source, Token token) Parameters source string token Token Returns Program TokenizeSymbol(string, Token) public static Program TokenizeSymbol(string source, Token token) Parameters source string token Token Returns Program"
  },
  "api/chia.dotnet.clvm.Position.html": {
    "href": "api/chia.dotnet.clvm.Position.html",
    "title": "Class Position | chia-dotnet-clvm",
    "keywords": "Class Position Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll Represents a position in a source code file, specified by line and column numbers. public class Position Inheritance object Position Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Position(string, int) Initializes a new instance of the Position class with the specified source code and index. public Position(string source, int index) Parameters source string The source code. index int The index of the position in the source code. Properties Column Gets the column number of the position. public int Column { get; init; } Property Value int Represents a position in a source code file, specified by line and column numbers. Line Gets the line number of the position. public int Line { get; init; } Property Value int Represents a position in a source code file, specified by line and column numbers. Methods ToString() Returns a string that represents the current position in the format \"line:column\". public override string ToString() Returns string A string representation of the position."
  },
  "api/chia.dotnet.clvm.Program.html": {
    "href": "api/chia.dotnet.clvm.Program.html",
    "title": "Class Program | chia-dotnet-clvm",
    "keywords": "Class Program Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll Represents a CLVM program. public class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Program(byte[]) public Program(byte[] value) Parameters value byte[] Represents a CLVM program. Program(Cons) public Program(Cons value) Parameters value Cons Represents a CLVM program. Fields False Represents the False program. public static readonly Program False Field Value Program Represents a CLVM program. Nil Represents the Nil program. public static readonly Program Nil Field Value Program Represents a CLVM program. True Represents the True program. public static readonly Program True Field Value Program Represents a CLVM program. Properties Atom public byte[] Atom { get; } Property Value byte[] Represents a CLVM program. Cons public Cons Cons { get; } Property Value Cons Represents a CLVM program. First public Program First { get; } Property Value Program Represents a CLVM program. IsAtom public bool IsAtom { get; } Property Value bool Represents a CLVM program. IsCons public bool IsCons { get; } Property Value bool Represents a CLVM program. IsNull public bool IsNull { get; } Property Value bool Represents a CLVM program. Position public Position? Position { get; } Property Value Position Represents a CLVM program. PositionSuffix public string PositionSuffix { get; } Property Value string Represents a CLVM program. Rest public Program Rest { get; } Property Value Program Represents a CLVM program. Value public object Value { get; } Property Value object Represents a CLVM program. Methods At(Position) public Program At(Position position) Parameters position Position Represents a CLVM program. Returns Program Represents a CLVM program. Compile(CompileOptions?) public ProgramOutput Compile(CompileOptions? options = null) Parameters options CompileOptions Represents a CLVM program. Returns ProgramOutput Represents a CLVM program. Curry(IList<Program>) public Program Curry(IList<Program> args) Parameters args IList<Program> Represents a CLVM program. Returns Program Represents a CLVM program. Define(Program) public Program Define(Program program) Parameters program Program Represents a CLVM program. Returns Program Represents a CLVM program. DefineAll(IList<Program>) public Program DefineAll(IList<Program> programs) Parameters programs IList<Program> Represents a CLVM program. Returns Program Represents a CLVM program. Deserialize(byte[]) public static Program Deserialize(byte[] bytes) Parameters bytes byte[] Represents a CLVM program. Returns Program Represents a CLVM program. DeserializeHex(string) public static Program DeserializeHex(string hex) Parameters hex string Represents a CLVM program. Returns Program Represents a CLVM program. Equals(Program) public bool Equals(Program value) Parameters value Program Represents a CLVM program. Returns bool Represents a CLVM program. FromBigInt(BigInteger) public static Program FromBigInt(BigInteger value) Parameters value BigInteger Represents a CLVM program. Returns Program Represents a CLVM program. FromBool(bool) public static Program FromBool(bool value) Parameters value bool Represents a CLVM program. Returns Program Represents a CLVM program. FromBytes(byte[]) Creates a program from a byte array. public static Program FromBytes(byte[] value) Parameters value byte[] The byte array. Returns Program The created program. FromCons(Program, Program) Creates a program from two cons cells. public static Program FromCons(Program program1, Program program2) Parameters program1 Program The first program. program2 Program The second program. Returns Program The created program. FromHex(string) public static Program FromHex(string value) Parameters value string Represents a CLVM program. Returns Program Represents a CLVM program. FromInt(long) public static Program FromInt(long value) Parameters value long Represents a CLVM program. Returns Program Represents a CLVM program. FromJacobianPoint(JacobianPoint) public static Program FromJacobianPoint(JacobianPoint value) Parameters value JacobianPoint Represents a CLVM program. Returns Program Represents a CLVM program. FromList(IList<Program>) public static Program FromList(IList<Program> value) Parameters value IList<Program> Represents a CLVM program. Returns Program Represents a CLVM program. FromList(Program[]) public static Program FromList(Program[] programs) Parameters programs Program[] Represents a CLVM program. Returns Program Represents a CLVM program. FromPrivateKey(PrivateKey) public static Program FromPrivateKey(PrivateKey value) Parameters value PrivateKey Represents a CLVM program. Returns Program Represents a CLVM program. FromSource(string) public static Program FromSource(string source) Parameters source string Represents a CLVM program. Returns Program Represents a CLVM program. FromText(string) public static Program FromText(string value) Parameters value string Represents a CLVM program. Returns Program Represents a CLVM program. Hash() public byte[] Hash() Returns byte[] Represents a CLVM program. HashHex() public string HashHex() Returns string Represents a CLVM program. Run(Program, RunOptions?) public ProgramOutput Run(Program environment, RunOptions? options = null) Parameters environment Program Represents a CLVM program. options RunOptions Represents a CLVM program. Returns ProgramOutput Represents a CLVM program. Serialize() public byte[] Serialize() Returns byte[] Represents a CLVM program. SerializeHex() public string SerializeHex() Returns string Represents a CLVM program. ToBigInt() public BigInteger ToBigInt() Returns BigInteger Represents a CLVM program. ToBool() public bool ToBool() Returns bool Represents a CLVM program. ToBytes() public byte[] ToBytes() Returns byte[] Represents a CLVM program. ToHex() public string ToHex() Returns string Represents a CLVM program. ToInt() public long ToInt() Returns long Represents a CLVM program. ToJacobianPoint() public JacobianPoint ToJacobianPoint() Returns JacobianPoint Represents a CLVM program. ToList(bool) public IList<Program> ToList(bool strict = false) Parameters strict bool Represents a CLVM program. Returns IList<Program> Represents a CLVM program. ToPrivateKey() public PrivateKey ToPrivateKey() Returns PrivateKey Represents a CLVM program. ToSource(bool) public string ToSource(bool showKeywords = true) Parameters showKeywords bool Represents a CLVM program. Returns string Represents a CLVM program. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. ToText() public string ToText() Returns string Represents a CLVM program. Uncurry() public Tuple<Program, List<Program>>? Uncurry() Returns Tuple<Program, List<Program>> Represents a CLVM program."
  },
  "api/chia.dotnet.clvm.ProgramOutput.html": {
    "href": "api/chia.dotnet.clvm.ProgramOutput.html",
    "title": "Class ProgramOutput | chia-dotnet-clvm",
    "keywords": "Class ProgramOutput Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll Represents the output of a CLVM program execution. public record ProgramOutput : IEquatable<ProgramOutput> Inheritance object ProgramOutput Implements IEquatable<ProgramOutput> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Cost Gets or initializes the cost of executing the CLVM program. public BigInteger Cost { get; init; } Property Value BigInteger Represents the output of a CLVM program execution. Value Gets or initializes the value produced by the CLVM program. public Program Value { get; init; } Property Value Program Represents the output of a CLVM program execution."
  },
  "api/chia.dotnet.clvm.RunOptions.html": {
    "href": "api/chia.dotnet.clvm.RunOptions.html",
    "title": "Class RunOptions | chia-dotnet-clvm",
    "keywords": "Class RunOptions Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll Represents the options for running a CLVM program. public record RunOptions : IEquatable<RunOptions> Inheritance object RunOptions Implements IEquatable<RunOptions> Derived CompileOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MaxCost Gets or sets the maximum cost allowed for executing the program. public BigInteger? MaxCost { get; init; } Property Value BigInteger? Represents the options for running a CLVM program. Operators Gets or sets the type of operators to be used in the program. public OperatorsType Operators { get; init; } Property Value OperatorsType Represents the options for running a CLVM program. Strict Gets or sets a value indicating whether strict mode is enabled. public bool Strict { get; init; } Property Value bool Represents the options for running a CLVM program."
  },
  "api/chia.dotnet.clvm.Serialization.html": {
    "href": "api/chia.dotnet.clvm.Serialization.html",
    "title": "Class Serialization | chia-dotnet-clvm",
    "keywords": "Class Serialization Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public static class Serialization Inheritance object Serialization Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(List<byte>) public static Program Deserialize(List<byte> program) Parameters program List<byte> Returns Program Serialize(Program) public static byte[] Serialize(Program program) Parameters program Program Returns byte[]"
  },
  "api/chia.dotnet.clvm.Token.html": {
    "href": "api/chia.dotnet.clvm.Token.html",
    "title": "Class Token | chia-dotnet-clvm",
    "keywords": "Class Token Namespace chia.dotnet.clvm Assembly chia-dotnet-clvm.dll public record Token : IEquatable<Token> Inheritance object Token Implements IEquatable<Token> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Index public int Index { get; init; } Property Value int Text public string Text { get; init; } Property Value string"
  },
  "api/chia.dotnet.clvm.html": {
    "href": "api/chia.dotnet.clvm.html",
    "title": "Namespace chia.dotnet.clvm | chia-dotnet-clvm",
    "keywords": "Namespace chia.dotnet.clvm Classes CompileOptions Represents the options for compiling a CLVM program. Cons Represents a cons cell in a program. OperatorsType Represents a collection of operators used in the CLVM language. ParseError Position Represents a position in a source code file, specified by line and column numbers. Program Represents a CLVM program. ProgramOutput Represents the output of a CLVM program execution. RunOptions Represents the options for running a CLVM program. Delegates Operator Represents a delegate for an operator function."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | chia-dotnet-clvm",
    "keywords": "Getting Started Installation Install the nuget package dotnet add package chia-dotnet-clvm Run a Simple ChiaLisp Program"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | chia-dotnet-clvm",
    "keywords": "Introduction This is a direct port of the chia bls typescript library. Coding style and naming have been converted to C# conventions but otherwise it is very similar in API. All of the unit tests from the original project have been ported and pass. chia and its logo are the registered trademark or trademark of Chia Network, Inc. in the United States and worldwide."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to chia-dotnet-clvm | chia-dotnet-clvm",
    "keywords": "Welcome to chia-dotnet-clvm A (very much WIP) port of node-clvm-lib. Status All of the code is ported including units tests. 752/848 unit tests are passing (88%) See Also Documentation chia-dotnet chia-dotnet-bls chia-blockchain chia and its logo are the registered trademark or trademark of Chia Network, Inc. in the United States and worldwide."
  }
}